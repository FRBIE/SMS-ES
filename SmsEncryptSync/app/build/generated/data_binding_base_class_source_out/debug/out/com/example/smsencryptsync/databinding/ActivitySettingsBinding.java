// Generated by view binder compiler. Do not edit!
package com.example.smsencryptsync.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.smsencryptsync.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySettingsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton btnClear;

  @NonNull
  public final MaterialButton btnSave;

  @NonNull
  public final TextInputEditText etApiKey;

  @NonNull
  public final TextInputEditText etEncryptionPassword;

  @NonNull
  public final TextInputEditText etServerUrl;

  @NonNull
  public final TextInputLayout tilApiKey;

  @NonNull
  public final TextInputLayout tilEncryptionPassword;

  @NonNull
  public final TextInputLayout tilServerUrl;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final TextView tvDeviceId;

  private ActivitySettingsBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton btnClear, @NonNull MaterialButton btnSave,
      @NonNull TextInputEditText etApiKey, @NonNull TextInputEditText etEncryptionPassword,
      @NonNull TextInputEditText etServerUrl, @NonNull TextInputLayout tilApiKey,
      @NonNull TextInputLayout tilEncryptionPassword, @NonNull TextInputLayout tilServerUrl,
      @NonNull Toolbar toolbar, @NonNull TextView tvDeviceId) {
    this.rootView = rootView;
    this.btnClear = btnClear;
    this.btnSave = btnSave;
    this.etApiKey = etApiKey;
    this.etEncryptionPassword = etEncryptionPassword;
    this.etServerUrl = etServerUrl;
    this.tilApiKey = tilApiKey;
    this.tilEncryptionPassword = tilEncryptionPassword;
    this.tilServerUrl = tilServerUrl;
    this.toolbar = toolbar;
    this.tvDeviceId = tvDeviceId;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnClear;
      MaterialButton btnClear = ViewBindings.findChildViewById(rootView, id);
      if (btnClear == null) {
        break missingId;
      }

      id = R.id.btnSave;
      MaterialButton btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.etApiKey;
      TextInputEditText etApiKey = ViewBindings.findChildViewById(rootView, id);
      if (etApiKey == null) {
        break missingId;
      }

      id = R.id.etEncryptionPassword;
      TextInputEditText etEncryptionPassword = ViewBindings.findChildViewById(rootView, id);
      if (etEncryptionPassword == null) {
        break missingId;
      }

      id = R.id.etServerUrl;
      TextInputEditText etServerUrl = ViewBindings.findChildViewById(rootView, id);
      if (etServerUrl == null) {
        break missingId;
      }

      id = R.id.tilApiKey;
      TextInputLayout tilApiKey = ViewBindings.findChildViewById(rootView, id);
      if (tilApiKey == null) {
        break missingId;
      }

      id = R.id.tilEncryptionPassword;
      TextInputLayout tilEncryptionPassword = ViewBindings.findChildViewById(rootView, id);
      if (tilEncryptionPassword == null) {
        break missingId;
      }

      id = R.id.tilServerUrl;
      TextInputLayout tilServerUrl = ViewBindings.findChildViewById(rootView, id);
      if (tilServerUrl == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.tvDeviceId;
      TextView tvDeviceId = ViewBindings.findChildViewById(rootView, id);
      if (tvDeviceId == null) {
        break missingId;
      }

      return new ActivitySettingsBinding((ConstraintLayout) rootView, btnClear, btnSave, etApiKey,
          etEncryptionPassword, etServerUrl, tilApiKey, tilEncryptionPassword, tilServerUrl,
          toolbar, tvDeviceId);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
